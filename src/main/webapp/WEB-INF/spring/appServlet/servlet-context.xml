<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- Spring 프로젝트에서 MVC 관련 어노테이션을 사용할 수 있도록 해주는 설정 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적인 파일들을 캐싱해줄 수 있는 디렉토리와 url 설정 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- Controller에서 forwarding 할 때 사용하는 뷰 이름과 조합해서 실제 출력될	파일의 위치와 종류(JSTL View)를 결정하는 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 어노테이션이 적용된 클래스의 객체를 자동으로 만들어주는 패키지 설정,	스프링 MVC 프로젝트에서 모든 클래스는 이 패키지 안에서 생성
	domain 클래스를 제외하고는 전부 어노테이션을 이용해서 생성, 	이 패키지에 있는 클래스들은 new하지 않고 bean을 생성하지도 않는다-->
	<context:component-scan base-package="com.spring.junga" />
	
	<!-- Controller가 처리하지 못하는 요청을 WAS가 처리하도록 하는 설정 -->
	<default-servlet-handler/>
	
	<!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
	<beans:bean id="naverLoginBO" class="com.spring.junga.controller.NaverLoginBO" />
		
	<beans:bean id="LoginInterceptor" class="com.spring.junga.util.interceptor.LoginInterceptor">
	</beans:bean>
	<interceptors>
		<interceptor>
			<mapping path="/register.ja" />
			<mapping path="/detail.ja" />
			<beans:ref bean="LoginInterceptor" />
		</interceptor>
	</interceptors>
	
	<!-- MyBatis에 트랜잭션을 적용하기 위한 객체 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<beans:property name="dataSource" ref="dataSource" />
		</beans:bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- 파일 업로드를 위한 bean -->	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

</beans:beans>
